<Styles xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:sys="clr-namespace:System;assembly=netstandard"
             xmlns:ui="clr-namespace:FluentAvalonia.UI.Controls;assembly=FluentAvalonia"
             xmlns:media="clr-namespace:FluentAvalonia.UI.Media;assembly=FluentAvalonia">

	<Design.PreviewWith>
		<Border Padding="50" Width="250">
			<StackPanel>
				<ui:CommandBar ClosedDisplayMode="Compact" IsOpen="False" 
							   DefaultLabelPosition="Right">
					<ui:CommandBar.PrimaryCommands>
						<ui:CommandBarButton Label="Test" Icon="Save" IsCompact="False" />
					</ui:CommandBar.PrimaryCommands>
				</ui:CommandBar>
			</StackPanel>
		</Border>
	</Design.PreviewWith>

	<Styles.Resources>
		<x:Double x:Key="AppBarThemeMinHeight">64</x:Double>
		<x:Double x:Key="AppBarThemeCompactHeight">48</x:Double>
		<Thickness x:Key="AppBarEllipsisButtonInnerBorderMargin">2,6,6,6</Thickness>
		<x:Double x:Key="AppBarMoreButtonColumnMinWidth">6</x:Double>
		<Thickness x:Key="CommandBarOverflowPresenterMargin">0,4,0,4</Thickness>
		
		<x:Double x:Key="AppBarExpandButtonThemeWidth">48</x:Double>
		<!-- doubled b/c it seemed to clip the icon -->
		<x:Double x:Key="AppBarExpandButtonCircleDiameter">6</x:Double>

		<x:Double x:Key="AppBarThemeMinimalHeight">24</x:Double>
	</Styles.Resources>

	<!-- 
	Only ExpandDown is supported, although technically nothing actually "expands"
	**This is a simplified version**
	WinUI also handles this mostly with ClipRects and whatnot, which Avalonia is not 
	robust enough to handle, so we simplify that out...that also eliminates some 
	headaches for me in trying to make this work :D
	-->

	<Style Selector="ui|Button.CBEllipsisButton">
		<Setter Property="Background" Value="{DynamicResource AppBarButtonBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
		<Setter Property="FontWeight" Value="SemiBold" />
		<Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
		<Setter Property="Width" Value="{DynamicResource AppBarExpandButtonThemeWidth}" />
		<Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
		<Setter Property="Template">
			<ControlTemplate>
				<Panel>
					<ContentPresenter Name="ContentPresenter"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Content="{TemplateBinding Content}"
									Margin="{StaticResource AppBarEllipsisButtonInnerBorderMargin}"
									Padding="0"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									CornerRadius="{TemplateBinding CornerRadius}" />
				</Panel>
			</ControlTemplate>
		</Setter>
	</Style>
	<Style Selector="ui|Button.CBEllipsisButton:pointerover /template/ ContentPresenter">
		<Setter Property="Background" Value="{DynamicResource AppBarButtonBackgroundPointerOver}" />
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
		<Setter Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPointerOver}" />
	</Style>
	<Style Selector="ui|Button.CBEllipsisButton:pressed /template/ ContentPresenter">
		<Setter Property="Background" Value="{DynamicResource AppBarButtonBackgroundPressed}" />
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
		<Setter Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPressed}" />
	</Style>
	<Style Selector="ui|Button.CBEllipsisButton:disabled /template/ ContentPresenter">
		<Setter Property="Background" Value="{DynamicResource AppBarButtonBackgroundDisabled}" />
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource AppBarButtonForegroundDisabled}" />
		<Setter Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushDisabled}" />
	</Style>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->



	<Style Selector="ui|CommandBar">
		<Setter Property="Background" Value="{DynamicResource CommandBarBackground}" />
		<Setter Property="Foreground" Value="{DynamicResource CommandBarForeground}" />
		<Setter Property="Padding" Value="4,0,0,0" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="ClosedDisplayMode" Value="Compact" />
		<Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
				<Panel Name="LayoutRoot">
					<Border Name="ContentRootBorder"
							ClipToBounds="True"
							Height="{TemplateBinding Height}"
							Background="{TemplateBinding Background}">
						<Grid Name="ContentRoot">

							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" MinWidth="{DynamicResource AppBarMoreButtonColumnMinWidth}" />
							</Grid.ColumnDefinitions>

							<!-- ColumnDefs are locked in "dynamic overflow" b/c
								 we can't change ColDefs through Styles-->
							<Grid ColumnDefinitions="Auto,*">

								<ContentControl Name="ContentControl"
												Margin="{TemplateBinding Padding}"
												Content="{TemplateBinding Content}"
												ContentTemplate="{TemplateBinding ContentTemplate}"
												Foreground="{TemplateBinding Foreground}"
												HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />

								<ItemsControl Name="PrimaryItemsControl"
											  MinHeight="{DynamicResource AppBarThemeCompactHeight}"
											  Grid.Column="1">
									<ItemsControl.ItemsPanel>
										<ItemsPanelTemplate>
											<StackPanel Orientation="Horizontal" />
										</ItemsPanelTemplate>
									</ItemsControl.ItemsPanel>
								</ItemsControl>

							</Grid>

							<ui:Button Name="MoreButton"
									   Foreground="{TemplateBinding Foreground}"
									   Grid.Column="1"
									   Classes="CBEllipsisButton">
								<ui:SymbolIcon Symbol="MoreHorizontal"
											   FontSize="24"
											   Height="{StaticResource AppBarExpandButtonCircleDiameter}"
											   Name="EllipsisIcon"/>
							</ui:Button>

							<Border Name="OpenBorder"
									Grid.ColumnSpan="2"
									VerticalAlignment="Stretch"
									CornerRadius="{TemplateBinding CornerRadius}" />

						</Grid>
					</Border>

					<Popup Name="OverflowPopup"
						   WindowManagerAddShadowHint="False"
						   PlacementTarget="{TemplateBinding}"
						   PlacementMode="AnchorAndGravity"
						   PlacementAnchor="BottomRight"
						   PlacementGravity="BottomLeft"
						   IsOpen="{TemplateBinding IsOpen, Mode=TwoWay}"
						   IsLightDismissEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=!IsSticky}">
						<ui:CommandBarOverflowPresenter Name="SecondaryItemsControl" />
					</Popup>
					
				</Panel>
            </ControlTemplate>
        </Setter>
    </Style>

	<Style Selector="ui|CommandBar /template/ Grid#ContentRoot">
		<Setter Property="MinHeight" Value="{DynamicResource AppBarThemeCompactHeight}" />
		<Setter Property="VerticalAlignment" Value="Top" />
	</Style>
	<Style Selector="ui|CommandBar /template/ ui|Button#MoreButton">
		<Setter Property="Padding" Value="{DynamicResource CommandBarMoreButtonMargin}" />
		<!--<Setter Property="MinHeight" Value="{DynamicResource AppBarThemeCompactHeight}" />-->
		<Setter Property="VerticalAlignment" Value="Top" />
	</Style>
	<Style Selector="ui|CommandBar /template/ Border#OpenBorder">
		<Setter Property="BorderThickness" Value="{DynamicResource CommandBarBorderThicknessOpen}" />
		<Setter Property="BorderBrush" Value="{DynamicResource CommandBarBorderBrushOpen}" />
		<Setter Property="IsVisible" Value="False" />
	</Style>
	<Style Selector="ui|CommandBar:disabled /template/ ui|Button#MoreButton ui|SymbolIcon">
		<Setter Property="Foreground" Value="{DynamicResource CommandBarEllipsisIconForegroundDisabled}" />
	</Style>


	<!-- DisplayModes (:compact|:hidden|:minimal) -->

	<!-- Hidden -->
	<Style Selector="ui|CommandBar:hidden">
		<Setter Property="IsVisible" Value="False" />
	</Style>
	<Style Selector="ui|CommandBar:hidden:open">
		<Setter Property="IsVisible" Value="True" />
	</Style>

	<!-- Minimal 
	This is where things get weird. Apparently somehowe the height of the CommandBar is also
	set to AppBarThemeMinimalHeight, but there is no style setter for it, so, it's being set
	in one of the two ways...
	1. In code, but that should be visible in the VisualTree inspector, most likely, unless
	   its in MeasureOverride where they're just passing the height of the More Button as the
	   desired height??
	2. All the clips and transforms applied also can affect layout of other elements? Don't think
	   this is the case though b/c I can't repro that
	
	(1) is probably the most plausible, but wouldn't allow for overriding, so what I'm going to do
	is just tell the CommandBar Height to be AppBarThemeMinimalHeight when minimal style is set and
	return it to NaN when open
	This is probably the #1 control I'm eagerly awaiting becoming open sourced, because so much of 
	the templates and how it works are truly a mystery
	-->
	<Style Selector="ui|CommandBar:minimal">
		<Setter Property="Height" Value="{DynamicResource AppBarThemeMinimalHeight}" />
	</Style>
	<Style Selector="ui|CommandBar:minimal /template/ ContentControl#ContentControl">
		<Setter Property="IsHitTestVisible" Value="False" />
		<Setter Property="IsEnabled" Value="False" />
		<Setter Property="Opacity" Value="0" />
	</Style>
	<Style Selector="ui|CommandBar:minimal /template/ ui|Button#MoreButton">
		<Setter Property="Padding" Value="14 11 14 0" />
		<Setter Property="MinHeight" Value="{DynamicResource AppBarThemeMinimalHeight}" />
		<Setter Property="VerticalAlignment" Value="Top" />
	</Style>
	<Style Selector="ui|CommandBar:minimal /template/ ItemsControl#PrimaryItemsControl">
		<Setter Property="IsHitTestVisible" Value="False" />
		<Setter Property="IsEnabled" Value="False" />
		<Setter Property="Opacity" Value="0" />
	</Style>

	<Style Selector="ui|CommandBar:minimal:open">
		<Setter Property="Height" Value="NaN" />
	</Style>
	<Style Selector="ui|CommandBar:minimal:open /template/ ContentControl#ContentControl">
		<Setter Property="IsHitTestVisible" Value="True" />
		<Setter Property="IsEnabled" Value="True" />
		<Setter Property="Opacity" Value="1" />
	</Style>
	<Style Selector="ui|CommandBar:minimal:open /template/ ui|Button#MoreButton">
		<Setter Property="Padding" Value="14 11 14 0" />
		<Setter Property="MinHeight" Value="{DynamicResource AppBarThemeMinimalHeight}" />
	</Style>
	<Style Selector="ui|CommandBar:minimal:open /template/ ItemsControl#PrimaryItemsControl">
		<Setter Property="IsHitTestVisible" Value="True" />
		<Setter Property="IsEnabled" Value="True" />
		<Setter Property="Opacity" Value="1" />
	</Style>


	<!-- Compact (closed is default state) -->
	<Style Selector="ui|CommandBar:compact:open /template/ Border#ContentRootBorder">
		<Setter Property="Background" Value="{DynamicResource CommandBarBackgroundOpen}" />
		<Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
	</Style>
	<Style Selector="ui|CommandBar:compact:open /template/ Border#OpenBorder">
		<Setter Property="IsVisible" Value="True" />
	</Style>
	
	
	<Style Selector="ui|CommandBar:open /template/ ui|Button#MoreButton">
		<Setter Property="VerticalAlignment" Value="Stretch" />
	</Style>

</Styles>
